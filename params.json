{
  "name": "Cffi utils",
  "tagline": "Utility modules to build python wrappers around C code",
  "body": "# Module cffi_utils.sowrapper\r\nUtility functions to locate and load shared libraries\r\n\r\n### DESCRIPTION\r\nRecommended usage:\r\n\t    \r\nShould only need to use get_lib_ffi_shared() or get_lib_ffi_resource()\r\n\t    \r\nUse get_lib_ffi_shared to load a system-wide shared library with a known library filename and / or path\r\n\t    \r\nUse get_lib_ffi_resource to load a module-specific shared library where library filename _MAY_ be mangled as per PEP3149 and path _MAY_ need to be looked up using pkg_resources. Internally, get_lib_ffi_resource() calls get_lib_ffi_shared()\r\n\t    \r\nBoth return a tuple: (ffi, lib):\r\n\r\n\tffi-->FFIExt - should behave like cffi.FFI with some additional\r\n\t\tutility methods\r\n\tlib-->SharedLibWrapper instance - use methods on this object to\r\n\t\tcall methods in the shared library\r\n\r\n### CLASSES\r\n\t    class SharedLibWrapper(__builtin__.object)\r\n\t     |  Methods defined here:\r\n\t     |  \r\n\t     |  __init__(self, libpath, c_hdr, module_name=None)\r\n\t     |      libpath-->str: library name; can also be full path\r\n\t     |      c_hdr-->str: C-style header definitions for functions to wrap\r\n\t     |      ffi-->FFIExt or cffi.FFI\r\n\r\n### FUNCTIONS\r\n\tget_lib_ffi_resource(module_name, libpath, c_hdr)\r\n\t\tmodule_name-->str: module name to retrieve resource\r\n\t\tlibpath-->str: shared library filename with optional path\r\n\t\tc_hdr-->str: C-style header definitions for functions to wrap\r\n\t\tReturns-->(ffi, lib)\r\n\t\t\r\n\t\tUse this method when you are loading a package-specific shared library\r\n\t\tIf you want to load a system-wide shared library, use get_lib_ffi_shared\r\n\t\tinstead\r\n\t    \r\n\tget_lib_ffi_shared(libpath, c_hdr)\r\n\t\tlibpath-->str: shared library filename with optional path\r\n\t\tc_hdr-->str: C-style header definitions for functions to wrap\r\n\t\tReturns-->(ffi, lib)\r\n\r\n# Module cffi_utils.ffi\r\nExtension of cffi.FFI adding a few utility methods\r\n\r\n### CLASSES\r\n\t    class FFIExt(cffi.api.FFI)\r\n\t     |  FFIExt is an extension of cffi.FFI, adding a few utility methods\r\n\t     |  \r\n\t     |  get_cdata(), get_buffer() and get_bytes() all operate on a variable\r\n\t     |  list of arguments as a convenience.\r\n\t     |  \r\n\t     |  Otherwise, get_cdata() and get_buffer() are equivalent to\r\n\t     |  FFI.from_buffer() and FFI.buffer() respectively\r\n\t     |  \r\n\t     |  get_bytes() is identical to get_buffer() except that outputs are\r\n\t     |  converted to bytes\r\n\t     |  \r\n\t     |  get_buffer(self, *args)\r\n\t     |      all args-->_cffi_backend.CDataOwn\r\n\t     |      Must be a pointer or an array\r\n\t     |      Returns-->buffer (if a SINGLE argument was provided)\r\n\t     |                LIST of buffer (if a args was a tuple or list)\r\n\t     |  \r\n\t     |  get_bytes(self, *args)\r\n\t     |      all args-->_cffi_backend.CDataOwn\r\n\t     |      Must be a pointer or an array\r\n\t     |      Returns-->bytes (if a SINGLE argument was provided)\r\n\t     |                LIST of bytes (if a args was a tuple or list)\r\n\t     |  \r\n\t     |  get_cdata(self, *args)\r\n\t     |      all args-->_cffi_backend.buffer\r\n\t     |      Returns-->cdata (if a SINGLE argument was provided)\r\n\t     |                LIST of cdata (if a args was a tuple or list)\r\n\t     |  \r\n\t     |  get_extension(self)\r\n\r\n\r\n# Module cffi_utils.utils2to3\r\nUtility functions for Py2/Py3 compatibility\r\n\r\n### FUNCTIONS\r\n\r\n\tchr(x)\r\n\t\tx-->int / byte\r\n\t\tReturns-->byte / str of length 1\r\n\t\t    Behaves like PY2 chr() in PY2 or PY3\r\n\t    \r\n\tdecode(b, encoding='latin-1')\r\n\t\tb-->bytes\r\n\t\tencoding-->str: encoding to use. Recommended to use default\r\n\t\tReturns-->str: b decoded to str using encoding\r\n\t\t    Works in PY2, PY3\r\n\t    \r\n\tencode(s, encoding='latin-1')\r\n\t\ts-->str\r\n\t\tencoding-->str: encoding to use. Recommended to use default\r\n\t\tReturns-->bytes: s encoded to bytes using encoding\r\n\t\t    Works in PY2, PY3\r\n\t    \r\n\tfromBytes(b)\r\n\t\ts-->bytes (or str)\r\n\t\tReturns-->str (works in PY2, PY3)\r\n\t    \r\n\tinputFromBytes(func, *args, **kwargs)\r\n\t\tDescriptor that converts all arguments to str\r\n\t    \r\n\tinputToBytes(func, *args, **kwargs)\r\n\t\tDescriptor that converts all arguments to bytes\r\n\t    \r\n\tord(x)\r\n\t\tx-->int / byte\r\n\t\tReturns-->int\r\n\t\t    Behaves like PY2 ord() in PY2 or PY3\r\n\t    \r\n\toutputFromBytes(func, *args, **kwargs)\r\n\t\tDescriptor that converts all return values to str\r\n\t    \r\n\toutputToBytes(func, *args, **kwargs)\r\n\t\tDescriptor that converts all return values to bytes\r\n\t    \r\n\ttoBytes(s)\r\n\t\ts-->str (or bytes)\r\n\t\tReturns-->bytes (works in PY2, PY3)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}